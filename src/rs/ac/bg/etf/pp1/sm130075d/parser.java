
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Feb 10 16:46:49 CET 2017
//----------------------------------------------------

package rs.ac.bg.etf.pp1.sm130075d;

import java.io.File;
import java.io.FileOutputStream;
import rs.etf.pp1.mj.runtime.*;
import java.util.stream.Collectors;
import java.util.*;
import java_cup.runtime.*;
import rs.etf.pp1.symboltable.structure.*;
import rs.etf.pp1.symboltable.concepts.*;
import rs.etf.pp1.symboltable.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Feb 10 16:46:49 CET 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\253\000\002\122\002\000\002\123\002\000\002\002" +
    "\012\000\002\002\004\000\002\003\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\002\000" +
    "\002\005\004\000\002\110\003\000\002\110\003\000\002" +
    "\110\003\000\002\124\002\000\002\006\007\000\002\125" +
    "\002\000\002\007\006\000\002\010\003\000\002\010\005" +
    "\000\002\126\002\000\002\011\005\000\002\012\004\000" +
    "\002\063\004\000\002\063\004\000\002\064\004\000\002" +
    "\064\004\000\002\013\004\000\002\013\003\000\002\127" +
    "\002\000\002\016\005\000\002\130\002\000\002\020\006" +
    "\000\002\020\003\000\002\060\004\000\002\060\004\000" +
    "\002\061\005\000\002\061\004\000\002\021\004\000\002" +
    "\021\003\000\002\014\003\000\002\014\003\000\002\017" +
    "\004\000\002\017\005\000\002\015\002\000\002\015\003" +
    "\000\002\062\003\000\002\062\003\000\002\102\002\000" +
    "\002\102\004\000\002\131\002\000\002\076\012\000\002" +
    "\075\003\000\002\105\003\000\002\077\002\000\002\077" +
    "\004\000\002\077\003\000\002\022\002\000\002\022\005" +
    "\000\002\103\002\000\002\103\003\000\002\132\002\000" +
    "\002\133\002\000\002\023\013\000\002\024\002\000\002" +
    "\024\004\000\002\025\004\000\002\025\004\000\002\026" +
    "\005\000\002\027\004\000\002\027\004\000\002\030\004" +
    "\000\002\030\004\000\002\031\003\000\002\031\004\000" +
    "\002\073\003\000\002\074\003\000\002\074\003\000\002" +
    "\032\004\000\002\134\002\000\002\135\002\000\002\032" +
    "\012\000\002\136\002\000\002\137\002\000\002\140\002" +
    "\000\002\141\002\000\002\032\017\000\002\032\004\000" +
    "\002\032\004\000\002\032\005\000\002\032\007\000\002" +
    "\032\010\000\002\032\005\000\002\033\002\000\002\033" +
    "\004\000\002\034\002\000\002\034\004\000\002\071\002" +
    "\000\002\071\004\000\002\142\002\000\002\035\005\000" +
    "\002\143\002\000\002\035\007\000\002\035\004\000\002" +
    "\144\002\000\002\116\005\000\002\037\003\000\002\037" +
    "\003\000\002\040\002\000\002\040\003\000\002\036\003" +
    "\000\002\036\003\000\002\042\003\000\002\042\005\000" +
    "\002\065\003\000\002\065\003\000\002\041\002\000\002" +
    "\041\003\000\002\043\004\000\002\044\002\000\002\044" +
    "\004\000\002\057\004\000\002\100\002\000\002\100\003" +
    "\000\002\101\003\000\002\101\003\000\002\045\004\000" +
    "\002\046\004\000\002\121\002\000\002\121\004\000\002" +
    "\047\004\000\002\050\004\000\002\120\002\000\002\120" +
    "\004\000\002\051\002\000\002\051\004\000\002\104\002" +
    "\000\002\104\003\000\002\145\002\000\002\114\006\000" +
    "\002\112\004\000\002\112\005\000\002\113\003\000\002" +
    "\113\003\000\002\117\002\000\002\117\003\000\002\106" +
    "\003\000\002\106\003\000\002\111\003\000\002\111\005" +
    "\000\002\146\002\000\002\115\005\000\002\115\003\000" +
    "\002\115\005\000\002\115\005\000\002\052\002\000\002" +
    "\052\005\000\002\072\002\000\002\072\005\000\002\107" +
    "\005\000\002\147\002\000\002\107\007\000\002\107\003" +
    "\000\002\055\003\000\002\055\003\000\002\055\003\000" +
    "\002\066\003\000\002\056\003\000\002\056\003\000\002" +
    "\067\003\000\002\070\003\000\002\070\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0100\000\004\051\005\001\002\000\004\002\u0102\001" +
    "\002\000\004\004\001\001\002\000\004\004\007\001\002" +
    "\000\012\004\ufffd\032\ufffd\034\ufffd\035\ufffd\001\002\000" +
    "\012\004\012\032\ufff9\034\022\035\021\001\002\000\006" +
    "\003\uffee\004\uffee\001\002\000\042\003\uffb7\004\uffb7\010" +
    "\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\017\uffb7" +
    "\023\uffb7\024\uffb7\025\uffb7\027\uffb7\030\uffb7\031\uffb7\032" +
    "\uffb7\001\002\000\004\004\344\001\002\000\012\004\ufffa" +
    "\032\ufffa\034\ufffa\035\ufffa\001\002\000\012\004\012\032" +
    "\ufff9\034\022\035\021\001\002\000\004\032\041\001\002" +
    "\000\012\004\ufffb\032\ufffb\034\ufffb\035\ufffb\001\002\000" +
    "\012\004\ufffc\032\ufffc\034\ufffc\035\ufffc\001\002\000\004" +
    "\004\uffce\001\002\000\004\004\012\001\002\000\004\004" +
    "\ufff4\001\002\000\004\004\026\001\002\000\004\017\040" +
    "\001\002\000\004\016\ufff2\001\002\000\006\017\ufff0\025" +
    "\030\001\002\000\004\004\026\001\002\000\004\017\uffef" +
    "\001\002\000\004\016\033\001\002\000\010\005\034\006" +
    "\036\007\037\001\002\000\032\010\ufff7\011\ufff7\012\ufff7" +
    "\013\ufff7\014\ufff7\015\ufff7\017\ufff7\023\ufff7\024\ufff7\025" +
    "\ufff7\027\ufff7\031\ufff7\001\002\000\006\017\ufff1\025\ufff1" +
    "\001\002\000\032\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014" +
    "\ufff6\015\ufff6\017\ufff6\023\ufff6\024\ufff6\025\ufff6\027\ufff6" +
    "\031\ufff6\001\002\000\032\010\ufff5\011\ufff5\012\ufff5\013" +
    "\ufff5\014\ufff5\015\ufff5\017\ufff5\023\ufff5\024\ufff5\025\ufff5" +
    "\027\ufff5\031\ufff5\001\002\000\012\004\ufff3\032\ufff3\034" +
    "\ufff3\035\ufff3\001\002\000\012\004\000\033\000\037\000" +
    "\040\000\001\002\000\012\004\uffc7\033\uffc2\037\043\040" +
    "\uffc7\001\002\000\006\004\uffc6\040\uffc6\001\002\000\004" +
    "\033\341\001\002\000\012\004\uffc7\033\uffc2\037\043\040" +
    "\uffc7\001\002\000\006\004\012\040\051\001\002\000\004" +
    "\004\uffb6\001\002\000\004\004\052\001\002\000\004\004" +
    "\uffb5\001\002\000\004\026\uffc5\001\002\000\004\026\055" +
    "\001\002\000\010\003\105\004\012\032\101\001\002\000" +
    "\010\003\061\004\012\027\063\001\002\000\010\003\uffb9" +
    "\004\uffb9\032\uffb9\001\002\000\004\004\072\001\002\000" +
    "\010\003\uffbf\004\uffbf\032\uffbf\001\002\000\006\025\070" +
    "\027\071\001\002\000\006\003\061\004\012\001\002\000" +
    "\010\003\uffc0\004\uffc0\032\uffc0\001\002\000\006\025\065" +
    "\027\066\001\002\000\006\003\uffbd\004\uffbd\001\002\000" +
    "\010\003\uffbb\004\uffbb\032\uffbb\001\002\000\010\003\uffb8" +
    "\004\uffb8\032\uffb8\001\002\000\006\003\uffbc\004\uffbc\001" +
    "\002\000\010\003\uffba\004\uffba\032\uffba\001\002\000\010" +
    "\025\uffd2\027\uffd2\030\074\001\002\000\006\025\uffbe\027" +
    "\uffbe\001\002\000\004\031\075\001\002\000\010\017\uffd1" +
    "\025\uffd1\027\uffd1\001\002\000\004\004\uffe5\001\002\000" +
    "\026\004\uffc4\032\uffc4\033\uffc4\041\uffc4\043\uffc4\044\uffc4" +
    "\045\uffc4\046\uffc4\047\uffc4\050\uffc4\001\002\000\004\017" +
    "\111\001\002\000\026\004\uffd4\032\uffd4\033\uffd4\041\uffd4" +
    "\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\001" +
    "\002\000\006\003\105\004\012\001\002\000\026\004\uffdb" +
    "\032\uffdb\033\uffdb\041\uffdb\043\uffdb\044\uffdb\045\uffdb\046" +
    "\uffdb\047\uffdb\050\uffdb\001\002\000\026\004\uffd3\032\uffd3" +
    "\033\uffd3\041\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047" +
    "\uffd3\050\uffd3\001\002\000\006\017\106\032\107\001\002" +
    "\000\006\003\uffdf\004\uffdf\001\002\000\026\004\uffdd\032" +
    "\uffdd\033\uffdd\041\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd" +
    "\047\uffdd\050\uffdd\001\002\000\026\004\uffdc\032\uffdc\033" +
    "\uffdc\041\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc" +
    "\050\uffdc\001\002\000\010\003\uffe0\004\uffe0\032\112\001" +
    "\002\000\026\004\uffde\032\uffde\033\uffde\041\uffde\043\uffde" +
    "\044\uffde\045\uffde\046\uffde\047\uffde\050\uffde\001\002\000" +
    "\026\004\115\032\117\033\uffa5\041\122\043\116\044\130" +
    "\045\126\046\127\047\125\050\114\001\002\000\004\026" +
    "\324\001\002\000\046\010\uff60\011\uff60\012\uff60\013\uff60" +
    "\014\uff60\015\uff60\016\uff60\017\uff60\020\uff60\021\uff60\022" +
    "\uff60\023\uff60\024\uff60\025\uff60\026\uff60\027\uff60\030\uff60" +
    "\031\uff60\001\002\000\004\026\uffb0\001\002\000\026\004" +
    "\115\032\117\033\uffa5\041\122\043\116\044\130\045\126" +
    "\046\127\047\125\050\114\001\002\000\022\011\uff9f\014" +
    "\uff9f\016\uff9f\020\161\021\266\022\264\026\uff9d\030\160" +
    "\001\002\000\004\033\262\001\002\000\004\026\227\001" +
    "\002\000\026\004\115\032\117\033\uffa5\041\122\043\116" +
    "\044\130\045\126\046\127\047\125\050\114\001\002\000" +
    "\004\017\225\001\002\000\004\026\216\001\002\000\004" +
    "\017\215\001\002\000\022\004\uff7a\005\uff7a\006\uff7a\007" +
    "\uff7a\012\136\017\uff72\026\uff7a\052\uff7a\001\002\000\004" +
    "\017\131\001\002\000\030\004\uffab\032\uffab\033\uffab\041" +
    "\uffab\042\uffab\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab" +
    "\050\uffab\001\002\000\016\004\115\005\034\006\036\007" +
    "\037\026\152\052\145\001\002\000\004\017\213\001\002" +
    "\000\020\015\uff73\017\uff73\023\uff73\024\uff73\025\uff73\027" +
    "\uff73\031\uff73\001\002\000\030\011\uff78\012\142\013\141" +
    "\014\uff78\015\uff74\017\uff74\023\uff74\024\uff74\025\uff74\027" +
    "\uff74\031\uff74\001\002\000\016\004\uff79\005\uff79\006\uff79" +
    "\007\uff79\026\uff79\052\uff79\001\002\000\004\017\uff71\001" +
    "\002\000\006\011\207\014\211\001\002\000\016\004\uff5b" +
    "\005\uff5b\006\uff5b\007\uff5b\026\uff5b\052\uff5b\001\002\000" +
    "\016\004\uff5a\005\uff5a\006\uff5a\007\uff5a\026\uff5a\052\uff5a" +
    "\001\002\000\016\004\115\005\034\006\036\007\037\026" +
    "\152\052\145\001\002\000\016\004\uff5c\005\uff5c\006\uff5c" +
    "\007\uff5c\026\uff5c\052\uff5c\001\002\000\004\004\012\001" +
    "\002\000\040\010\uff6c\011\uff6c\012\uff6c\013\uff6c\014\uff6c" +
    "\015\uff6c\017\uff6c\020\161\023\uff6c\024\uff6c\025\uff6c\026" +
    "\uff6c\027\uff6c\030\160\031\uff6c\001\002\000\032\010\uff6a" +
    "\011\uff6a\012\uff6a\013\uff6a\014\uff6a\015\uff6a\017\uff6a\023" +
    "\uff6a\024\uff6a\025\uff6a\027\uff6a\031\uff6a\001\002\000\032" +
    "\010\155\011\uff75\012\uff75\013\uff75\014\uff75\015\uff75\017" +
    "\uff75\023\uff75\024\uff75\025\uff75\027\uff75\031\uff75\001\002" +
    "\000\032\010\uff6e\011\uff6e\012\uff6e\013\uff6e\014\uff6e\015" +
    "\uff6e\017\uff6e\023\uff6e\024\uff6e\025\uff6e\027\uff6e\031\uff6e" +
    "\001\002\000\020\004\uff7a\005\uff7a\006\uff7a\007\uff7a\012" +
    "\136\026\uff7a\052\uff7a\001\002\000\004\027\154\001\002" +
    "\000\032\010\uff68\011\uff68\012\uff68\013\uff68\014\uff68\015" +
    "\uff68\017\uff68\023\uff68\024\uff68\025\uff68\027\uff68\031\uff68" +
    "\001\002\000\016\004\115\005\034\006\036\007\037\026" +
    "\152\052\145\001\002\000\032\010\uff6d\011\uff6d\012\uff6d" +
    "\013\uff6d\014\uff6d\015\uff6d\017\uff6d\023\uff6d\024\uff6d\025" +
    "\uff6d\027\uff6d\031\uff6d\001\002\000\034\010\uff67\011\uff67" +
    "\012\uff67\013\uff67\014\uff67\015\uff67\017\uff67\023\uff67\024" +
    "\uff67\025\uff67\026\171\027\uff67\031\uff67\001\002\000\022" +
    "\003\uff62\004\uff62\005\uff62\006\uff62\007\uff62\012\uff62\026" +
    "\uff62\052\uff62\001\002\000\004\004\162\001\002\000\046" +
    "\010\uff63\011\uff63\012\uff63\013\uff63\014\uff63\015\uff63\016" +
    "\uff63\017\uff63\020\uff63\021\uff63\022\uff63\023\uff63\024\uff63" +
    "\025\uff63\026\uff63\027\uff63\030\uff63\031\uff63\001\002\000" +
    "\022\003\164\004\uff7a\005\uff7a\006\uff7a\007\uff7a\012\136" +
    "\026\uff7a\052\uff7a\001\002\000\020\015\uff6f\017\uff6f\023" +
    "\uff6f\024\uff6f\025\uff6f\027\uff6f\031\uff6f\001\002\000\004" +
    "\031\167\001\002\000\020\015\uff70\017\uff70\023\uff70\024" +
    "\uff70\025\uff70\027\uff70\031\uff70\001\002\000\046\010\uff61" +
    "\011\uff61\012\uff61\013\uff61\014\uff61\015\uff61\016\uff61\017" +
    "\uff61\020\uff61\021\uff61\022\uff61\023\uff61\024\uff61\025\uff61" +
    "\026\uff61\027\uff61\030\uff61\031\uff61\001\002\000\032\010" +
    "\uff6b\011\uff6b\012\uff6b\013\uff6b\014\uff6b\015\uff6b\017\uff6b" +
    "\023\uff6b\024\uff6b\025\uff6b\027\uff6b\031\uff6b\001\002\000" +
    "\024\003\175\004\uff7a\005\uff7a\006\uff7a\007\uff7a\012\136" +
    "\026\uff7a\027\uff8e\052\uff7a\001\002\000\004\027\uff90\001" +
    "\002\000\006\025\200\027\uff8d\001\002\000\004\027\177" +
    "\001\002\000\004\027\uff8f\001\002\000\006\025\uff92\027" +
    "\uff92\001\002\000\032\010\uff66\011\uff66\012\uff66\013\uff66" +
    "\014\uff66\015\uff66\017\uff66\023\uff66\024\uff66\025\uff66\027" +
    "\uff66\031\uff66\001\002\000\020\004\uff7a\005\uff7a\006\uff7a" +
    "\007\uff7a\012\136\026\uff7a\052\uff7a\001\002\000\006\025" +
    "\uff91\027\uff91\001\002\000\034\010\uff65\011\uff65\012\uff65" +
    "\013\uff65\014\uff65\015\uff65\017\uff65\023\uff65\024\uff65\025" +
    "\uff65\027\uff65\030\203\031\uff65\001\002\000\020\004\uff7a" +
    "\005\uff7a\006\uff7a\007\uff7a\012\136\026\uff7a\052\uff7a\001" +
    "\002\000\032\010\uff69\011\uff69\012\uff69\013\uff69\014\uff69" +
    "\015\uff69\017\uff69\023\uff69\024\uff69\025\uff69\027\uff69\031" +
    "\uff69\001\002\000\004\031\206\001\002\000\032\010\uff64" +
    "\011\uff64\012\uff64\013\uff64\014\uff64\015\uff64\017\uff64\023" +
    "\uff64\024\uff64\025\uff64\027\uff64\031\uff64\001\002\000\022" +
    "\003\uff57\004\uff57\005\uff57\006\uff57\007\uff57\012\uff57\026" +
    "\uff57\052\uff57\001\002\000\022\003\164\004\uff7a\005\uff7a" +
    "\006\uff7a\007\uff7a\012\136\026\uff7a\052\uff7a\001\002\000" +
    "\022\003\uff58\004\uff58\005\uff58\006\uff58\007\uff58\012\uff58" +
    "\026\uff58\052\uff58\001\002\000\020\015\uff77\017\uff77\023" +
    "\uff77\024\uff77\025\uff77\027\uff77\031\uff77\001\002\000\030" +
    "\004\uffa9\032\uffa9\033\uffa9\041\uffa9\042\uffa9\043\uffa9\044" +
    "\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\001\002\000\032" +
    "\010\155\011\uff76\012\uff76\013\uff76\014\uff76\015\uff76\017" +
    "\uff76\023\uff76\024\uff76\025\uff76\027\uff76\031\uff76\001\002" +
    "\000\030\004\uffaa\032\uffaa\033\uffaa\041\uffaa\042\uffaa\043" +
    "\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\001\002" +
    "\000\020\004\uff7a\005\uff7a\006\uff7a\007\uff7a\012\136\026" +
    "\uff7a\052\uff7a\001\002\000\006\025\221\027\uffa1\001\002" +
    "\000\004\027\223\001\002\000\004\005\222\001\002\000" +
    "\004\027\uffa0\001\002\000\004\017\224\001\002\000\030" +
    "\004\uffa7\032\uffa7\033\uffa7\041\uffa7\042\uffa7\043\uffa7\044" +
    "\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\001\002\000\030" +
    "\004\uffb4\032\uffb4\033\uffb4\041\uffb4\042\uffb4\043\uffb4\044" +
    "\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\001\002\000\004" +
    "\033\uffa4\001\002\000\022\003\233\004\uff7a\005\uff7a\006" +
    "\uff7a\007\uff7a\012\136\026\uff7a\052\uff7a\001\002\000\004" +
    "\027\253\001\002\000\006\017\uff86\027\uff86\001\002\000" +
    "\012\017\uff7e\023\247\024\uff7e\027\uff7e\001\002\000\006" +
    "\017\uff85\027\uff85\001\002\000\014\015\243\017\uff7c\023" +
    "\uff7c\024\uff7c\027\uff7c\001\002\000\010\017\uff82\024\240" +
    "\027\uff82\001\002\000\006\017\uff89\027\uff89\001\002\000" +
    "\010\017\uff82\024\240\027\uff82\001\002\000\020\004\uff7a" +
    "\005\uff7a\006\uff7a\007\uff7a\012\136\026\uff7a\052\uff7a\001" +
    "\002\000\010\017\uff83\024\uff83\027\uff83\001\002\000\006" +
    "\017\uff81\027\uff81\001\002\000\020\004\uff7a\005\uff7a\006" +
    "\uff7a\007\uff7a\012\136\026\uff7a\052\uff7a\001\002\000\012" +
    "\017\uff80\023\uff80\024\uff80\027\uff80\001\002\000\012\017" +
    "\uff7b\023\uff7b\024\uff7b\027\uff7b\001\002\000\012\017\uff7e" +
    "\023\247\024\uff7e\027\uff7e\001\002\000\020\004\uff7a\005" +
    "\uff7a\006\uff7a\007\uff7a\012\136\026\uff7a\052\uff7a\001\002" +
    "\000\010\017\uff84\024\uff84\027\uff84\001\002\000\012\017" +
    "\uff7f\023\uff7f\024\uff7f\027\uff7f\001\002\000\010\017\uff7d" +
    "\024\uff7d\027\uff7d\001\002\000\024\004\uffb3\032\uffb3\041" +
    "\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3" +
    "\001\002\000\024\004\115\032\117\041\122\043\116\044" +
    "\130\045\126\046\127\047\125\050\114\001\002\000\030" +
    "\004\uffb2\032\uffb2\033\uffb2\041\uffb2\042\uffb2\043\uffb2\044" +
    "\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2\001\002\000\030" +
    "\004\uffa3\032\uffa3\033\uffa3\041\uffa3\042\257\043\uffa3\044" +
    "\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3\001\002\000\024" +
    "\004\115\032\117\041\122\043\116\044\130\045\126\046" +
    "\127\047\125\050\114\001\002\000\030\004\uffb1\032\uffb1" +
    "\033\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046" +
    "\uffb1\047\uffb1\050\uffb1\001\002\000\030\004\uffa2\032\uffa2" +
    "\033\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046" +
    "\uffa2\047\uffa2\050\uffa2\001\002\000\012\004\uffc3\033\uffc3" +
    "\037\uffc3\040\uffc3\001\002\000\004\026\277\001\002\000" +
    "\006\017\uff97\027\uff97\001\002\000\010\011\272\014\273" +
    "\016\274\001\002\000\006\017\uff98\027\uff98\001\002\000" +
    "\006\017\uff9b\027\uff9b\001\002\000\022\003\uff9a\004\uff9a" +
    "\005\uff9a\006\uff9a\007\uff9a\012\uff9a\026\uff9a\052\uff9a\001" +
    "\002\000\006\017\uff9e\027\uff9e\001\002\000\022\003\uff5d" +
    "\004\uff5d\005\uff5d\006\uff5d\007\uff5d\012\uff5d\026\uff5d\052" +
    "\uff5d\001\002\000\022\003\uff5e\004\uff5e\005\uff5e\006\uff5e" +
    "\007\uff5e\012\uff5e\026\uff5e\052\uff5e\001\002\000\022\003" +
    "\uff5f\004\uff5f\005\uff5f\006\uff5f\007\uff5f\012\uff5f\026\uff5f" +
    "\052\uff5f\001\002\000\022\003\164\004\uff7a\005\uff7a\006" +
    "\uff7a\007\uff7a\012\136\026\uff7a\052\uff7a\001\002\000\006" +
    "\017\uff99\027\uff99\001\002\000\024\003\175\004\uff7a\005" +
    "\uff7a\006\uff7a\007\uff7a\012\136\026\uff7a\027\uff8e\052\uff7a" +
    "\001\002\000\004\027\301\001\002\000\006\017\uff9c\027" +
    "\uff9c\001\002\000\004\033\303\001\002\000\030\004\uffa6" +
    "\032\uffa6\033\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045" +
    "\uffa6\046\uffa6\047\uffa6\050\uffa6\001\002\000\004\026\305" +
    "\001\002\000\010\003\306\004\115\017\uff96\001\002\000" +
    "\006\017\uff93\027\uff93\001\002\000\004\017\uffaf\001\002" +
    "\000\006\017\uff95\027\uff95\001\002\000\006\017\uff94\027" +
    "\uff94\001\002\000\004\017\313\001\002\000\024\003\233" +
    "\004\uff7a\005\uff7a\006\uff7a\007\uff7a\012\136\017\uff88\026" +
    "\uff7a\052\uff7a\001\002\000\004\017\uff87\001\002\000\004" +
    "\017\316\001\002\000\010\003\uffae\004\uffae\027\uffae\001" +
    "\002\000\010\003\306\004\115\027\uff96\001\002\000\004" +
    "\027\321\001\002\000\024\004\uffad\032\uffad\041\uffad\043" +
    "\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050\uffad\001\002" +
    "\000\024\004\115\032\117\041\122\043\116\044\130\045" +
    "\126\046\127\047\125\050\114\001\002\000\030\004\uffac" +
    "\032\uffac\033\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045" +
    "\uffac\046\uffac\047\uffac\050\uffac\001\002\000\004\004\115" +
    "\001\002\000\010\020\161\027\326\030\160\001\002\000" +
    "\004\017\327\001\002\000\030\004\uffa8\032\uffa8\033\uffa8" +
    "\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047" +
    "\uffa8\050\uffa8\001\002\000\004\004\332\001\002\000\006" +
    "\017\uffe1\025\uffe3\001\002\000\010\017\uffd2\025\uffd2\030" +
    "\074\001\002\000\004\017\uffe4\001\002\000\006\017\uffec" +
    "\025\uffec\001\002\000\004\025\336\001\002\000\004\004" +
    "\332\001\002\000\004\017\uffe2\001\002\000\004\033\uffc1" +
    "\001\002\000\004\002\uffff\001\002\000\004\032\ufff8\001" +
    "\002\000\010\003\346\032\uffcc\036\345\001\002\000\010" +
    "\003\uffcd\032\uffcd\036\uffcd\001\002\000\004\004\012\001" +
    "\002\000\004\032\uffca\001\002\000\004\032\uffd0\001\002" +
    "\000\004\032\351\001\002\000\012\003\355\004\012\032" +
    "\uffd6\033\uffd6\001\002\000\004\017\uffda\001\002\000\006" +
    "\032\362\033\uffc9\001\002\000\004\017\357\001\002\000" +
    "\004\017\uffd9\001\002\000\006\032\uffd5\033\uffd5\001\002" +
    "\000\012\003\355\004\012\032\uffd8\033\uffd8\001\002\000" +
    "\006\032\uffd7\033\uffd7\001\002\000\004\033\365\001\002" +
    "\000\012\004\uffc7\033\uffc2\037\043\040\uffc7\001\002\000" +
    "\004\033\364\001\002\000\004\033\uffc8\001\002\000\012" +
    "\004\uffcf\032\uffcf\034\uffcf\035\uffcf\001\002\000\004\032" +
    "\uffcb\001\002\000\006\003\371\004\332\001\002\000\006" +
    "\017\u0100\025\u0101\001\002\000\006\017\376\025\377\001" +
    "\002\000\012\004\uffed\032\uffed\034\uffed\035\uffed\001\002" +
    "\000\006\003\371\004\332\001\002\000\012\004\uffe6\032" +
    "\uffe6\034\uffe6\035\uffe6\001\002\000\012\004\uffe7\032\uffe7" +
    "\034\uffe7\035\uffe7\001\002\000\012\004\uffe8\032\uffe8\034" +
    "\uffe8\035\uffe8\001\002\000\006\003\uffea\004\uffea\001\002" +
    "\000\012\004\uffe9\032\uffe9\034\uffe9\035\uffe9\001\002\000" +
    "\006\003\uffeb\004\uffeb\001\002\000\004\002\ufffe\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0100\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\122\005\001\001\000\004\003\007\001\001\000\002" +
    "\001\001\000\020\004\014\005\015\006\017\011\016\073" +
    "\010\075\012\076\013\001\001\000\004\126\366\001\001" +
    "\000\002\001\001\000\004\105\342\001\001\000\002\001" +
    "\001\000\020\004\014\005\341\006\017\011\016\073\010" +
    "\075\012\076\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\073\022" +
    "\001\001\000\004\124\023\001\001\000\006\007\026\010" +
    "\024\001\001\000\002\001\001\000\004\125\031\001\001" +
    "\000\002\001\001\000\006\007\026\010\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\110\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\123\041\001\001" +
    "\000\010\023\044\024\043\103\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\023\044\024\337\103\045" +
    "\001\001\000\006\073\046\074\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\132\052" +
    "\001\001\000\004\025\053\001\001\000\016\016\077\021" +
    "\103\060\101\061\102\062\076\073\075\001\001\000\014" +
    "\026\063\027\061\030\055\031\057\073\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\026\063\027\061\030\055\031\066\073" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\102\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\127" +
    "\327\001\001\000\004\133\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\016\077\021\107\060\101\061" +
    "\102\073\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\032\122\033\120\035\123\107\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\136\303\001\001\000\012" +
    "\032\122\033\301\035\123\107\117\001\001\000\010\037" +
    "\266\142\264\143\262\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\032\122\033\225\035\123\107\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\104\131\112\134\113\136\114\133\117\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\107\145" +
    "\110\146\111\213\115\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\056\143\066\142\145\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\070\207\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\107\145" +
    "\110\146\111\147\115\150\001\001\000\002\001\001\000" +
    "\004\073\201\001\001\000\004\146\156\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\104" +
    "\131\112\134\113\152\114\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\107\145\110\146\115\155\001" +
    "\001\000\002\001\001\000\004\052\167\001\001\000\004" +
    "\147\162\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\104\131\106\164\112\134\113\165\114\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\041\171\042\172" +
    "\065\173\104\131\112\134\113\175\114\133\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\104" +
    "\131\112\134\113\200\114\133\001\001\000\002\001\001" +
    "\000\004\072\203\001\001\000\012\104\131\112\134\113" +
    "\204\114\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\104\131\106" +
    "\211\112\134\113\165\114\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\104\131\112\134\113\216\114\133" +
    "\001\001\000\004\071\217\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\045" +
    "\234\047\231\057\230\101\227\104\131\112\134\113\233" +
    "\114\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\050\245\120\247\001\001\000\002\001\001\000\004" +
    "\051\243\001\001\000\006\046\236\121\235\001\001\000" +
    "\002\001\001\000\006\046\236\121\241\001\001\000\016" +
    "\045\240\047\231\104\131\112\134\113\233\114\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\104\131" +
    "\112\134\113\244\114\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\050\245\120\251\001\001\000\014" +
    "\047\250\104\131\112\134\113\233\114\133\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\134\253\001\001\000\010\032\254\035\123\107\117\001" +
    "\001\000\004\135\255\001\001\000\004\034\257\001\001" +
    "\000\010\032\260\035\123\107\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\055\267\116\270\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\144\274\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\104\131\106\275\112\134\113\165" +
    "\114\133\001\001\000\002\001\001\000\020\041\171\042" +
    "\172\065\277\104\131\112\134\113\175\114\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\035\310\036\307" +
    "\040\306\107\117\001\001\000\002\001\001\000\004\137" +
    "\311\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\045\234\047\231\057\230\100\314\101" +
    "\313\104\131\112\134\113\233\114\133\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\140\316\001\001\000" +
    "\012\035\310\036\307\040\317\107\117\001\001\000\002" +
    "\001\001\000\004\141\321\001\001\000\010\032\322\035" +
    "\123\107\117\001\001\000\002\001\001\000\004\107\324" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\330\020\332\001\001\000\004\130\334" +
    "\001\001\000\004\102\333\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\330\020\336" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\077\346\001\001\000\002" +
    "\001\001\000\004\073\365\001\001\000\002\001\001\000" +
    "\004\131\347\001\001\000\002\001\001\000\014\014\353" +
    "\015\352\016\351\017\355\073\075\001\001\000\002\001" +
    "\001\000\004\022\360\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\014\353\016\351\017" +
    "\357\073\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\023\044\024\362\103\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\012\367\013\371\063\372\064\373\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\012\367\013\374\063\372\064\373\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 3;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

  Tab.init();
  boolType = new Struct(Struct.Bool);
  boolObj = new Obj(Obj.Type, "bool", boolType);

  Tab.currentScope().addToLocals(new Obj(Obj.Type, "bool", boolType));

    }


    Struct boolType;
    static Logger logger;
    Obj boolObj;
    boolean _main = true;
    int depth = 0;
    boolean errorDetected = false;
    public int error_sync_size() { return 1; }
    public static void main(String args[]) throws Exception {
        java.io.FileReader r = new java.io.FileReader(args[0]);
		boolean writeToFile = false;

		if (args.length >= 3) {
			if(args[1].equals("-f")) {
				writeToFile = true;
			}

		}

		logger = new Logger(writeToFile, "parser");
        Lexer skener = new Lexer(r);

        parser p = new parser(skener);
        Symbol s = p.parse();  //pocetak parsiranja

        if(!p.errorDetected) {
          File objFile = new File(args[1]);
          if(objFile.exists())
            objFile.delete();
          Code.write(new FileOutputStream(objFile));
          System.out.println("************************USPESNO ZAVRSENO PARSIRANJE!*************************");
        }
    }

    /***********************************************************************
    * slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
    ***********************************************************************/
    public void report_fatal_error(String message, Object   info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }

    public void syntax_error(Symbol cur_token) {
        report_error("Sintaksna greska", cur_token);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_info(String message) {
      logger.log(message);
    }

    public void report_error(String message, Object info)
    {
      errorDetected = true;

      if (info != null && info instanceof Symbol) {
          Symbol symbol = (Symbol)info;
          message += " " + symbol.left + ":" + symbol.right + " " + message;
      }

      logger.error(message);
    }

    public void report_error(String message, int row, int column) {
      report_error("" + row + ":" + column + " " + message, null);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


    Struct varTypeHelper;
    int opCode = -1;
    boolean hasOperand = false;
    Obj helperObj;
    Obj helperObj2;
    Stack<Integer> startPC = new Stack<Integer>();
    Stack<Integer> endPC = new Stack<Integer>();
    int backAddr;
    Stack<Integer> breakJumpAddr = new Stack<Integer>();
    Stack<Integer> breakJumpNum = new Stack<Integer>();
    Obj methodObjHelper;
    Obj conHelper;
    Stack<Integer> rArgCounters = new Stack<Integer>();
    Stack<Obj> methodCalls = new Stack<Obj>();
    Stack<Integer> falseJumpAddr = new Stack<Integer>();
    Stack<Integer> trueJumpAddr = new Stack<Integer>();
    Stack<Integer> condEndJump = new Stack<Integer>();
    Stack<Integer> forEndJump = new Stack<Integer>();
    Stack<Integer> numOfFacts = new Stack<Integer>();
    Stack<Integer> numOfTerms = new Stack<Integer>();
    Stack<Obj> objHelpers = new Stack<Obj>();
    boolean isComplexObj = false;
    Stack<Integer> addresses = new Stack<Integer>();
    Stack<VirtualTable> vts = new Stack<VirtualTable>();
    int offset;
    Obj arrayHelper = null;
    Obj methodObj;
    Obj classObj;
    Obj objHelper;
    Obj desHelper;
    Obj thisHelper;
    boolean classCall = false;
    Struct extendsType;
    Struct classT;
    int dataSize = 0;
    int argCount = 0;
    int rArgCount = 0;
    int globalVar = 0;
    int globalFunc = 0;
    int localVar = 0;
    int globalConst = 0;
    int globalArrays = 0;
    int classDef = 0;
    int classMethodDef = 0;
    int statementBlock = 0;
    int mainFuncCalls = 0;
    int formalArguments = 0;
    int classFields;
    int formParsCnt;
    boolean isArray;
    int arrays = 0, vars = 0, consts = 0, methods = 0;;
    boolean insideClass = false;
    boolean insideMethod = false;
    boolean global = true;
    boolean insideMain = false;
    boolean hasReturn = false;
    int forLoopLevel = 0;

private String objToString(Obj o) {
  StringBuilder output = new StringBuilder();
  switch (o.getKind()) {
  case Obj.Con:  output.append("Con "); break;
  case Obj.Var:  output.append("Var "); break;
  case Obj.Type: output.append("Type "); break;
  case Obj.Meth: output.append("Meth "); break;
  case Obj.Fld:  output.append("Fld "); break;
  case Obj.Prog: output.append("Prog "); break;
  }

  output.append(o.getName());
  output.append(": ");

  switch (o.getType().getKind()) {
  case Struct.None:
	output.append("notype");
	break;
  case Struct.Int:
  	output.append("int");
	break;
  case Struct.Char:
	output.append("char");
	break;
  case Struct.Array:
	output.append("Arr of ");

	switch (o.getType().getElemType().getKind()) {
	case Struct.None:
	output.append("notype");
	break;
	case Struct.Int:
	output.append("int");
	break;
	case Struct.Char:
	output.append("char");
	break;
	case Struct.Class:
	output.append("Class");
	break;
	}

	break;
	case Struct.Class:
	  output.append("Class");
	  break;
	}

  output.append(", ");
  output.append(o.getAdr());
  output.append(", ");
  output.append(o.getLevel() + " ");

  return output.toString();
}

private int getClassSize(Obj class1) {
  Obj sClass = getClassField(class1, "$super");
  int size = sClass != Tab.noObj ? 0 : 1;
  size += class1.getType().getElemType().getNumberOfFields() - 2;

  if(sClass != Tab.noObj) {
    size += getClassSize(sClass);
  }

  return size;
}

private void loadList(Vector<Obj> objs) {
 for(int i = 0; i < objs.size(); i++) {
   Code.load(objs.elementAt(i));
 }
}

private void store(Vector<Obj> objs) {
 for(int i = 0; i < objs.size(); i++) {
   Code.load(objs.elementAt(i));
 }
}

private int calculateOffset(Obj class1) {
  return getClassSize(class1) - 1;
}

private void generateCallCode(Obj method) {
  Obj obj = objHelpers.pop();

  if(checkStatic(method)) {
    if(method.getName().equals("ord") || method.getName().equals("chr")) {
      return;
    }
    if(method.getName().equals("len")) {
      Code.put(Code.arraylength);
      return;
    }

    endPC.pop();
    startPC.pop();
    int dest = method.getAdr() - Code.pc;
    Code.put(Code.call);
    Code.put2(dest);
  } else {
    Obj vtSym = getClassField(obj, "$vtable");
    int ePC = endPC.pop();
    int sPC = startPC.pop();

    while(sPC != ePC) {
      Code.put(Code.buf[sPC++]);
    }

    Code.load(vtSym);
    String name = method.getName();
    Code.put(Code.invokevirtual);

    for(int i = 0; i < name.length(); i++) {
      Code.put4(name.charAt(i));
    }

    Code.put4(-1);
  }
}

private Obj getClassField(Obj obj, String name) {
  Obj class1 = obj;

  if(class1.getKind() == Obj.Elem && class1.getType().getKind() == Struct.Class) {
    class1 = new Obj(class1.getKind(), "", new Struct(Struct.Class, class1.getType()));
    class1.getType().setElementType(obj.getType());
  }
  Obj o = class1.getType().getKind() == Struct.Class ?
          (class1.getKind() == Obj.Type ?
           class1.getType().getMembersTable().searchKey(name) :
           class1.getType().getElemType().getMembersTable().searchKey(name)) :
          Tab.noObj;

  if(class1.getType().getElemType() == classT && (o == null || o == Tab.noObj))
    o = Tab.find(name);

  if(o == null)
    o = Tab.noObj;

  return o;
}

private boolean compatability(Obj class1, Struct type) {
   if(class1 == null || type == null) {
     return false;
   }

   Obj obj = class1;

   if(class1.getKind() == Obj.Elem && class1.getType().getKind() == Struct.Class) {
     class1 = new Obj(Obj.Var, "", new Struct(Struct.Class, class1.getType()));
     class1.getType().setElementType(obj.getType());
   }

   Obj sClass = new Obj(Obj.Var, "", new Struct(Struct.Class));
   sClass.getType().setElementType(type);
   sClass = getClassField(sClass, "$super");

   boolean result = false;

   if(class1.getType().compatibleWith(type)) {
     return true;
   }

   if(class1.getType().getKind() == Struct.Class && class1.getKind() != Obj.Type) {
      result |= class1.getType().getElemType().compatibleWith(type);
      result |= sClass != Tab.noObj && compatability(class1, sClass.getType().getElemType());
   }

   return result;
}

private void incrementArgs() {
  int x = rArgCounters.pop();
  x++;
  rArgCounters.push(x);
}

private int getRelOperator(String s) {
  switch(s) {
    case "<=": return Code.le;
    case ">=": return Code.ge;
    case ">" : return Code.gt;
    case "<" : return Code.lt;
    case "==": return Code.eq;
    case "!=": return Code.ne;
    case "none": return Code.eq;
  }

  return -1;
}

private void allocateComplexObject(Obj class1) {
  Obj superClass = getClassField(class1, "$super");
  int numOfFields = class1.getType().getElemType() == null ?
                    class1.getType().getNumberOfFields() :
                    class1.getType().getElemType().getNumberOfFields();
  if(superClass != Tab.noObj) {
    numOfFields += getClassSize(superClass);
  }

  Code.put(Code.new_);
  Code.put2(numOfFields*4);
}

private int getOperand(String s) {
  switch(s) {
    case "+": return Code.add;
    case "-": return Code.sub;
    case "*": return Code.mul;
    case "/": return Code.div;
    case "%": return Code.rem;
    case "++": return Code.add;
    case "--": return Code.sub;
  }

  return -1;
}

private boolean opType(String s) {
  switch(s) {
    case "+": case "-": case "/": case "*": case "%":
      return false;
    case "*=": case "/=": case "%=": case "+=": case "-=":
      return true;
  }

  return false;
}
private boolean checkStatic(Obj o) {
  if(o != null && o.getKind() == Obj.Meth) {
    if(methodObj != o)
      return o.getLocalSymbols().stream().filter(x-> x.getName() == "this").count() == 0;
    else
       return Tab.currentScope().findSymbol("this") == null;
  }

  return false;
}

//private List<Obj> getFieldsWithType(Obj obj, int kind) {
//}

//TODO: finish this
private boolean validInheritance(Obj method) {
  if(!insideClass)
    return true;

  Obj extendedMethod = searchClass(extendsType, method.getName());

  if(extendedMethod.getType() == Tab.noType) {
    return true;
  } else {
    return false;
  }
}

void printSymbols() {
   Tab.currentScope().values().stream().forEach(x-> print(x.getName()));
}

void printClassFlds(Obj obj) {
   print("***********************KRECEM**********************");
   obj.getType().getElemType().getMembersTable().symbols().stream().forEach(x -> print(x.getName()));
}
private void initVTable(Obj obj) {


}
private Obj findObj(Obj o, String name) {
  Obj obj = o;

  if(o.getKind() == Obj.Elem) {
     obj = new Obj(o.getKind(), "", new Struct(Struct.Class));
     obj.getType().setElementType(o.getType());
  }

  Obj result = Tab.noObj;
  if(obj != null && obj.getType().getKind() == Struct.Class) {
     if(insideClass &&
       obj.getType().getElemType() == classT) { //if var.ident and we are inside class of type var
       result = Tab.currentScope().getOuter().findSymbol(name);
       if(result == null)
       result = result == null ? Tab.noObj : result;
     } else if (obj.getKind() == Obj.Type) { //if Class.Method
       if(insideClass && obj  == classObj) {
         result = Tab.find(name);
       } else {
         result = obj.getType().getMembersTable().searchKey(name);
       }

       result = checkStatic(result) ? result : Tab.noObj;
     } else {
       SymbolDataStructure table = obj.getType().getElemType().getMembersTable();
       result = table.searchKey(name);
       result = result == null ? Tab.noObj : result;
     }

     if(result == Tab.noObj) { //if we didn't find key, we are looking at SUPER class recursivly
       Obj sClass = getClassField(obj, "$super");
       if(sClass != Tab.noObj)
         result = findObj(sClass, name);
     }
  }

  return result;
}

private Struct getArgument(int fpos) {
  //if we are invoking Recursion local symbols are in current Scope not in scope of method
  if(methodCalls.peek() == methodObj) {
    return Tab.currentScope().values().stream().filter(o -> o.getFpPos() == fpos).collect(Collectors.toList()).get(0).getType();
  } else {
    return methodCalls.peek().getLocalSymbols().stream().filter(o -> o.getFpPos() == fpos).collect(Collectors.toList()).get(0).getType();
  }
}

private Obj searchClass(Struct cl, String name) {
  Obj result = cl.getMembersTable().searchKey(name);
  return result == null ? Tab.noObj : result;
}

private Obj insertSymbol(int kind, String name, Struct type) {
  int numSym = Tab.currentScope().values().size();

  if(kind != Obj.Type && type.getKind() == Struct.Class) {
    Struct tmp = new Struct(Struct.Class);
    tmp.setElementType(type);
    type = tmp;
  }

  Obj result = Tab.insert(kind, name, type);

  int numSymAfter = Tab.currentScope().values().size();


  if(numSym != numSymAfter) {
    //print("Definisan simbol: " + name);
    result.getType().getElemType();
  }
  else {
    parser.report_error("Redefinisan simbol: " + name + " u tabeli simbola", null);
  }

  return result;
}

private void print(String s) { parser.report_info(s);  }

public void printResult() {
            print("=====================SINTAKSNA ANALIZA=========================");
            print("Pronadjeno: " + globalVar + " globalnih promenljivih");
            print("Pronadjeno: " + globalConst + " globalnih konstanti");
            print("Pronadjeno: " + globalArrays + " globalnih nizova");
            print("Pronadjeno: " + localVar + " lokalnih promenljivih");
            print("Pronadjeno: " + globalFunc + " globalnih funkcija");
            print("Pronadjeno: " + classDef + " definicija klasa");
            print("Pronadjeno: " + classMethodDef + " metoda");
            print("Pronadjeno: " + statementBlock + " statement blokova");
            print("Pronadjeno: " + mainFuncCalls + " poziva funkcija u mainu");
            print("Pronadjeno: " + formParsCnt + " formalnih argumenata");
            print("Pronadjeno: " + classFields + " polja klasa");
}


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // RightOperands ::= MULOPRIGHT 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RightOperands",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // RightOperands ::= ADDOPRIGHT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RightOperands",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // Mulop ::= MULOPLEFT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Mulop",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // AddopLeft ::= MINUS 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = m; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AddopLeft",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // AddopLeft ::= PLUS 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AddopLeft",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // Addop ::= AddopLeft 
            {
              Object RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object al = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = al.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Addop",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // Assignop ::= MULOPRIGHT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Assignop",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // Assignop ::= ADDOPRIGHT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Assignop",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // Assignop ::= ASSIGN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Assignop",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // Designator ::= IDENT 
            {
              Obj RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ident = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                 startPC.push(Code.pc);
                 Obj des = Tab.currentScope().findSymbol(ident.toString());
                 Obj tryClass = Tab.find("this"); //we search for this - if we are inside method and inside non static class this will be found
                 des = des == null ? findObj(tryClass, ident.toString()) : des; //we prioritiez fields of class by first trying to find it there

                 if(insideMethod && checkStatic(methodObj)) {//ifStatic
                   if(des.getKind() == Obj.Fld) {
                     des = Tab.noObj;
                   } else if(des.getKind() == Obj.Meth && !checkStatic(des))  {
                     des = Tab.noObj;
                   }
                 }

                 if(des == Tab.noObj) {
                   des = Tab.find(ident.toString());
                 }

                 if(des == Tab.noObj) {
                   parser.report_error("Ne postoji simbol " + ident.toString() + " u tabeli simbola!", identleft, identright);
                 } else {
                     if(tryClass != Tab.noObj && (des.getKind() == Obj.Fld || des.getKind() == Obj.Meth)) {
                       Code.load(tryClass);
                       isComplexObj = true;
                       classCall = true;
                     } else {
                       classCall = false;
                       isComplexObj = false;
                     }

                   parser.report_info("Pretraga na (" + identleft + "), nadjeno " + objToString(des));
                 }

                 if(des.getKind() == Obj.Meth && isComplexObj) {
                   objHelper = tryClass;
                   thisHelper = tryClass;
                 } else {
                   objHelper = Tab.noObj;
                   thisHelper = Tab.noObj;
                 }

                 RESULT = des;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Designator",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Designator ::= Designator LSBR NT$21 ExprOrError RSBR 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int desleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Designator",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // NT$21 ::= 
            {
              Obj RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                  if(des.getType().getKind() != Struct.Array) {
                    parser.report_error("" + desleft + ":" + desright + " Promenljiva" + des.getName() +  " nije tipa niz!", null);
                    RESULT = Tab.noObj;
                  } else {
                    Code.load(des);
                    RESULT = new Obj(Obj.Elem, "", des.getType().getElemType());
                  }

                  arrayHelper = des;
                  isComplexObj = true;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",101, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Designator ::= Designator DOT IDENT 
            {
              Obj RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ident = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  if(des.getType().getKind() != Struct.Class) {
                    if(des != Tab.noObj)
                      parser.report_error("" + desleft + ":" + desright + " Promenljiva" + des.getName() +  " nije klasnog tipa!", null);
                    RESULT = Tab.noObj;
                  } else {
                    RESULT = findObj(des, ident.toString());
                    if(RESULT == Tab.noObj) {
                      parser.report_error("Nepostojece polje/metoda " + ident.toString() +  " za varijablu " + des.getName(), identleft, identright);
                    } else if(des.getKind() != Obj.Type) {
                      Code.load(des);
                      isComplexObj = true;
                    }
                  }

                  if(RESULT != Tab.noObj) {
                    parser.report_info("Pretraga na (" + identleft + "), nadjeno " + objToString(RESULT));
                  }

                  if(RESULT.getKind() == Obj.Meth) {
                    thisHelper = des;
                    classCall = true;
                    objHelper = des;
                  }
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Designator",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // NewParameters ::= LSBR ExprComb RSBR 
            {
              Struct RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Obj e = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e.getType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NewParameters",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // NewParameters ::= 
            {
              Struct RESULT =null;
		 RESULT = Tab.noType; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NewParameters",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // OptParameters ::= LBR ActParsWithError RBR 
            {
              Object RESULT =null;
		 if(insideMain) mainFuncCalls++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OptParameters",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // OptParameters ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OptParameters",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Factor ::= LBR ExprComb RBR 
            {
              Obj RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Obj e = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Factor ::= NEW Type NewParameters 
            {
              Obj RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nparamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nparamright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Struct nparam = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             //TODO noidea!
             if(nparam != Tab.intType && nparam != Tab.noType) {
               parser.report_error("Parametri operanda new moraju biti tipa int!", nleft, nright);
             }

             RESULT = new Obj(Obj.Type, "", type);;

             if(nparam == Tab.noType && type.getKind() != Struct.Class) {
               parser.report_error("" + nleft + ":" + nright + " Simbol nije klasnog tipa", nleft, nright);
             }
             if(nparam != Tab.noType) {
               Code.put(Code.newarray);
               if(type == Tab.charType) {
                 Code.put(0);
               } else {
                 Code.put(1);
               }

               RESULT = new Obj(Obj.Var, "", new Struct(Struct.Array, type));
             } else if(type.getKind() == Struct.Class) {
               RESULT = new Obj(Obj.Type, "", type);;
               allocateComplexObject(RESULT);

               //store value to VTable
               Code.put(Code.dup);
               VirtualTable vt = VTStorage.get(type);
               if(vt != null) {
                 Code.loadConst(vt.getAddr());
                 Code.store(type.getMembersTable().searchKey("$vtable"));
               }
             }
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Factor ::= Constant 
            {
              Obj RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Obj c = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             Code.load(c);
             RESULT = c;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Factor ::= Designator NT$20 OptParameters 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int desleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
             rArgCounters.pop();

             if(des.getKind() == Obj.Meth) {
               generateCallCode(des);
             } else {
               endPC.pop();
               startPC.pop();
               objHelpers.pop();
               Code.load(des);
             }

             methodCalls.pop();
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // NT$20 ::= 
            {
              Obj RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int desright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

             endPC.push(Code.pc);
             methodCalls.push(des);
             objHelpers.push(objHelper);
             int argCnt = (checkStatic(methodCalls.peek()) ? 0 : 1);
             rArgCounters.push(argCnt);
             RESULT = des;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",100, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Term ::= Term MULOPLEFT Factor 
            {
              Obj RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj t = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Obj f = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
           if(t.getType() != Tab.intType || f.getType() != Tab.intType) {
             parser.report_error("Cinilac mora biti tipa int!", op);
           }

           hasOperand = true;
           int operand = getOperand("" + op.toString().charAt(0));
           Code.put(operand);

           RESULT = f;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Term ::= Factor 
            {
              Obj RESULT =null;
		int factorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Obj factor = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
           RESULT = factor;
           hasOperand = false;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ExprOrError ::= error 
            {
              Obj RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Tab.noObj; parser.report_error("Uspesan oporavak od greske prilikom izraza", eleft, eright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprOrError",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ExprOrError ::= ExprComb 
            {
              Obj RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Obj e = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprOrError",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ExprOpt ::= ExprComb 
            {
              Obj RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Obj e = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprOpt",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ExprOpt ::= 
            {
              Obj RESULT =null;
		 RESULT = Tab.noObj; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprOpt",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ExprComb ::= RightExpr 
            {
              Obj RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Obj e = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
               RESULT = e;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprComb",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ExprComb ::= Expr 
            {
              Obj RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Obj e = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = e;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprComb",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Expr ::= Expr Addop Term 
            {
              Obj RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj e = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Obj t = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          if(e.getType() != Tab.intType || t.getType() != Tab.intType) {
            parser.report_error("" + tleft + ":" + tright + " Sabirci moraju biti tipa int!", null);
          }

          if(!e.getType().compatibleWith(t.getType())) {
            parser.report_error("" + eleft + ":" + eright + " Nekompatibilni tipovi!", null);
          }

          hasOperand = true;
          int operand = getOperand("" + op.toString().charAt(0));
          Code.put(operand);

          RESULT = t;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Expr ::= MinusOpt Term 
            {
              Obj RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Obj t = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
           if(m) {
             Code.put(Code.neg);
           }

           RESULT = t;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // RightExpr ::= Expr NT$19 RightOperands ExprOrError 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int desleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
               int operand = getOperand("" + op.toString().charAt(0));

               if(des.getKind() != Obj.Var &&
                  des.getKind() != Obj.Fld &&
                  des.getKind() != Obj.Elem) {
                 parser.report_error("" + desleft + ":" + desright + " Ovaj simbol ne moze ici sa ovim operandom!", null);
               } else {
                 Code.store(helperObj);
                 Code.load(des);
                 Code.load(helperObj);
                 Code.put(operand);
                 Code.store(des);
                 Code.load(des);

                 if(opCode != -1) {
                   Code.put(opCode);
                 }

                 opCode = -1;
               }

               RESULT = des;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RightExpr",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // NT$19 ::= 
            {
              Obj RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int desright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                int decrement = 0;
                int pcHack = Code.pc;

                if(hasOperand) {
                  opCode = Code.buf[Code.pc - 1];
                  decrement++;
                }

                //hacky way to determin how big is LOAD command
                Code.load(des);
                pcHack = Code.pc - pcHack;
                decrement += 2*pcHack;
                Code.pc -= decrement;

                if(des.getKind() == Obj.Elem) {
                  Code.put(Code.dup2);
                  Code.put(Code.dup2);
                }
                else if(des.getKind() == Obj.Fld) {
                  Code.put(Code.dup);
                  Code.put(Code.dup);
                }
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",99, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // MinusOpt ::= MINUS 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MinusOpt",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // MinusOpt ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MinusOpt",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // RelopExp ::= RELOP ExprComb 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelopExp",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // RelopExp ::= 
            {
              Object RESULT =null;
		 RESULT = "none"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelopExp",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CondFactRepeat ::= CondFactAnd CondFactRepeat 
            {
              Integer RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = r+1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CondFactRepeat",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CondFactRepeat ::= 
            {
              Integer RESULT =null;
		 RESULT = 0; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CondFactRepeat",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CondFactAnd ::= AND CondFact 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CondFactAnd",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CondFact ::= ExprComb RelopExp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Obj e = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                 int op = getRelOperator(r.toString());

                 if("none".equals(r.toString())) {
                   if(e.getType().getKind() != Struct.Bool) {
                     parser.report_error("" + eleft + ":" + eright + " Operand mora biti tipa bool u uslovnom iskazu!", null);
                   }
                   Code.loadConst(1);
                }

                 if(e.getType().getKind() == Struct.Class && op != Code.eq && op != Code.ne) {
                     parser.report_error("" + eleft + ":" + eright + " Ne moze se koristiti ovaj operand sa klasama!", null);
                 }

                 Code.putFalseJump(op, 0);
                 int adr = Code.pc - 2;
                 falseJumpAddr.push(adr);
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CondFact",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CondTermRep ::= CondTermOr CondTermRep 
            {
              Integer RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = r + 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CondTermRep",79, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CondTermRep ::= 
            {
              Integer RESULT =null;
		 RESULT = 0; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CondTermRep",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CondTermOr ::= OR CondTerm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CondTermOr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CondTerm ::= CondFact CondFactRepeat 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
               Code.putJump(0);
               trueJumpAddr.push(Code.pc-2);
               int numOfF = r + 1;

               for(int i = 0; i < numOfF; i++) {
                 int addr = falseJumpAddr.pop();
                 Code.fixup(addr);
               }
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CondTerm",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ConditionWithError ::= error 
            {
              Boolean RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 numOfTerms.push(0); RESULT = false; parser.report_error("Uspesan oporavak od greske prilikom uslova", eleft, eright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConditionWithError",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ConditionWithError ::= Condition 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConditionWithError",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ConditionOpt ::= ConditionWithError 
            {
              Boolean RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConditionOpt",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ConditionOpt ::= 
            {
              Boolean RESULT =null;
		  Code.putJump(0); trueJumpAddr.push(Code.pc-2); numOfTerms.push(1); RESULT = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConditionOpt",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Condition ::= CondTerm CondTermRep 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Code.putJump(0);
                condEndJump.push(Code.pc-2);
                numOfTerms.push(r+1);
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condition",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ActParamRepeat ::= ActualParameter ActParamRepeat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ActParamRepeat",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ActParamRepeat ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ActParamRepeat",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ActualParameter ::= COLIN ExprComb 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ActualParameter",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ActPars ::= ActParsHelper 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ActPars",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ActPars ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ActPars",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ActParsWithError ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.report_error("Uspesan oporavak od greske prilikon prosledjivanja argumenata funkciji", eleft, eright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ActParsWithError",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ActParsWithError ::= ActPars 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        methodObjHelper = methodCalls.peek();

                        if(methodObjHelper.getName() != "error") {
                          if(rArgCounters.peek() != methodObjHelper.getLevel()) {

                            parser.report_error("" + aleft + ":" + aright + " Pogresan broj argumenata za metodu " + methodObjHelper.getName(), null);
                          }
                        }
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ActParsWithError",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ActParsHelper ::= ActParsHelper COLIN ExprComb 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Obj e = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    methodObjHelper = methodCalls.peek();
                    Struct arg = methodObjHelper.getName() != "error" ? getArgument(rArgCounters.peek()) : Tab.noType;

                    if (arg.getKind() == Struct.Class && arg.getElemType() != null) {
                       arg = arg.getElemType();
                    }

                    if(methodObjHelper.getName() != "error" &&
                       methodObjHelper.getLevel() > rArgCounters.peek() &&
                       !compatability(e, arg)) {
                      parser.report_error("" + eleft + ":" + eright + " Pogresan tip " + (rArgCounters.peek()) + ". argumenta!", null);
                    }

                    incrementArgs();
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ActParsHelper",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ActParsHelper ::= ExprComb 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Obj e = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    methodObjHelper = methodCalls.peek();
                    Struct arg = methodObjHelper.getName() != "error" ? getArgument(rArgCounters.peek()) : Tab.noType;

                    if (arg.getKind() == Struct.Class && arg.getElemType() != null) {
                       arg = arg.getElemType();
                    }

                    if(methodObjHelper.getName() != "error" &&
                       methodObjHelper.getLevel() > rArgCounters.peek() &&
                       !compatability(e, arg) &&
                       !(methodObjHelper.getName().equals("len") && arg.getKind() == Struct.Array)) {
                      parser.report_error("" + eleft + ":"  + eright + " Pogresan tip " + (rArgCounters.peek()) + ". argumenta!", null);
                    }

                    incrementArgs();
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ActParsHelper",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DesignatorStatementErr ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.report_error("Uspesan oporavak od greske prilikom naredbe", e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementErr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DesignatorStatementErr ::= DesignatorStatement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementErr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DesignatorStatementOpt ::= DesignatorStatementErr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOpt",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // DesignatorStatementOpt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOpt",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DesignatorStmtOptions ::= DMINUS 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DesignatorStmtOptions",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DesignatorStmtOptions ::= DPLUS 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DesignatorStmtOptions",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // AssignWithError ::= Assignop NT$18 ExprOrError 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Obj expr = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                       int operand = getOperand("" + op.toString().charAt(0));
                       if(operand != -1) {
                         Code.store(helperObj);
                         Code.load(desHelper);
                         Code.load(helperObj);
                         Code.put(operand);
                       }

                       if(expr.getKind() != Obj.Type && expr.getType().getKind() == Struct.Class && !expr.getName().equals("null")) {
                         RESULT = new Obj(expr.getKind(), expr.getName(), expr.getType().getElemType());
                       } else {
                         RESULT = expr;
                       }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignWithError",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$18 ::= 
            {
              Obj RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                       int operand = getOperand("" + op.toString().charAt(0));
                       if(operand != -1) {
                         if(desHelper.getKind() == Obj.Elem) {
                           Code.put(Code.dup2);
                         } else if (desHelper.getKind() == Obj.Fld) {
                           Code.put(Code.dup);
                         }
                       }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",98, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // DesignatorStatement ::= Designator DesignatorStmtOptions 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                          startPC.pop();
                          if(des.getKind() != Obj.Var &&
                             des.getKind() != Obj.Fld &&
                             des.getKind() != Obj.Elem) {
                            parser.report_error("" + desleft + ":" + desright + "Ne moze se izvesti operacija nad simbolom " + des.getName() + "!", null);
                          }

                          if(des.getType() != Tab.intType) {
                            parser.report_error("" + desleft + ":" + desright + " Operacija se moze izvesti samo na tipu: int!", null);
                          }
                          if(isComplexObj) {
                            if(des.getKind() == Obj.Elem)
                              Code.put(Code.dup2);
                            else
                              Code.put(Code.dup);
                          }
                          isComplexObj = false;
                          Code.load(des);
                          Code.loadConst(1);
                          Code.put(getOperand(op.toString()));
                          Code.store(des);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // DesignatorStatement ::= Designator NT$17 LBR ActParsWithError RBR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int desleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
                          if(des.getKind() == Obj.Meth) {
                            generateCallCode(des);
                          }

                          if(insideMain)
                            mainFuncCalls++;
                          rArgCounters.pop();
                          objHelper = null;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$17 ::= 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int desright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                          endPC.push(Code.pc);
                          if(des.getKind() != Obj.Meth) {
                            parser.report_error("" + desleft + ":" + desright + " Simbol " + des.getName() + " nije metoda!", null);
                            methodObjHelper = new Obj(Obj.Meth, "error", Tab.noType);
                          } else {
                            methodObjHelper = des;
                          }

                          rArgCount = checkStatic(methodObjHelper) ? 0 : 1;
                          rArgCounters.push(rArgCount);
                          objHelpers.push(objHelper);
                          methodCalls.push(methodObjHelper);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",97, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DesignatorStatement ::= Designator NT$16 AssignWithError 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int desleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Obj res = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                          if(des.getKind() != Obj.Var &&
                             des.getKind() != Obj.Fld &&
                             des.getKind() != Obj.Elem) {
                               parser.report_error("" + desleft + ":" + desright + " Ne moze se dodeliti vrednost ovom simbolu!", null);
                          }

                          if(des != Tab.noObj &&
                             !compatability(des, res.getType())) {
                            parser.report_error("" + desleft + ":" + desright + " Izraz je pogresnog tipa!", null);
                          }

                          Code.store(des);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$16 ::= 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int desright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                          startPC.pop();
                          desHelper = des;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",96, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ConstOpt ::= COLIN NUMCONST 
            {
              java.lang.Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = java.lang.Integer.parseInt(n.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstOpt",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ConstOpt ::= 
            {
              java.lang.Integer RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstOpt",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ElsStmt ::= ELSE Statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ElsStmt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ElsStmt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ElsStmt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // StatementRepeat ::= Statement StatementRepeat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementRepeat",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // StatementRepeat ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementRepeat",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Statement ::= LCBR StatementRepeat RCBR 
            {
              Object RESULT =null;
		 statementBlock++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Statement ::= PRINT LBR ExprComb ConstOpt RBR SCOLIN 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Obj e = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		java.lang.Integer c = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                if(e.getType() != Tab.intType &&
                   e.getType() != Tab.charType &&
                   e.getType().getKind() != Struct.Bool) {
                   parser.report_error("Ne moze se pozvati PRINT za ovaj tip simbola!", pleft, pright);
                 }

                if(insideMain) mainFuncCalls++;

                if(e.getType() == Tab.intType) {
                  Code.loadConst(c == null ? 5 : c);
                  Code.put(Code.print);
                } else if (e.getType() == Tab.charType) {
                  Code.loadConst(c == null ? 1 : c);
                  Code.put(Code.bprint);
                }
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Statement ::= READ LBR Designator RBR SCOLIN 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int desleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                 startPC.pop();
                 if(des.getKind() != Obj.Var &&
                    des.getKind() != Obj.Fld &&
                    des.getKind() != Obj.Elem) {
                   parser.report_error("Ne moze se pozvati READ za ovaj simbola!", rleft, rright);
                 }

                 if(des.getType() != Tab.intType &&
                    des.getType() != Tab.charType &&
                    des.getType().getKind() != Struct.Bool) {
                   parser.report_error("Ne moze se pozvati READ za ovaj tip simbola!", rleft, rright);
                 }

                if(des.getType() == Tab.intType) {
                  Code.put(Code.read);
                } else {
                  Code.put(Code.bread);
                }

                Code.store(des);
                if(insideMain) mainFuncCalls++;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Statement ::= RETURN ExprOpt SCOLIN 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Obj e = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                hasReturn = true;

                Code.put(Code.exit);
                Code.put(Code.return_);

                if(!insideMethod) {
                  parser.report_error("Naredba return se sme koristiti samo uokviru funckije/metode", rleft, rright);
                } else {
                  if(methodObj.getType() != e.getType()) {
                    parser.report_error("Povratni tip metode i naredbe return se ne poklapaju", rleft, rright);
                  }
                }

              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Statement ::= CONTINUE SCOLIN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                if(forLoopLevel == 0) {
                  parser.report_error("continue se sme koristiti samo uokviru petlje!", cleft, cright);
                } else {
                  Code.putJump(forEndJump.peek());
                }
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Statement ::= BREAK SCOLIN 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                if(forLoopLevel == 0) {
                  parser.report_error("break se sme koristiti samo uokviru petlje!", bleft, bright);
                } else {
                  Code.putJump(0);
                  breakJumpAddr.push(Code.pc-2);
                  int x = breakJumpNum.pop();
                  breakJumpNum.push(x+1);
                }
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Statement ::= FOR NT$12 LBR DesignatorStatementOpt NT$13 SCOLIN ConditionOpt SCOLIN NT$14 DesignatorStatementOpt RBR NT$15 Statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		
                Code.putJump(forEndJump.pop());
                if(e)
                  Code.fixup(condEndJump.pop());
                forLoopLevel--;

                int n = breakJumpNum.pop();

                for(int i = 0; i < n; i++) {
                  Code.fixup(breakJumpAddr.pop());
                }
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$15 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

                Code.putJump(backAddr);

                int numOfT = numOfTerms.pop();
                for(int i = 0; i < numOfT; i++) {
                  int addr = trueJumpAddr.pop();
                  Code.fixup(addr);
                }
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$14 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                forEndJump.push(Code.pc);
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",94, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$13 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

                breakJumpNum.push(0);
                backAddr = Code.pc;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",93, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$12 ::= 
            {
              Object RESULT =null;
 forLoopLevel++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",92, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Statement ::= IF LBR ConditionWithError RBR NT$10 Statement NT$11 ElsStmt 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                if(e)
                  Code.fixup(trueJumpAddr.pop());
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

                if(e) {
                  Code.putJump(0);
                  int addr1 = Code.pc - 2;
                  trueJumpAddr.push(addr1);
                  Code.fixup(condEndJump.pop());
                }
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",91, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$10 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                if(e)
                {
                  int numOfT = numOfTerms.pop();
                  for(int i = 0; i < numOfT; i++) {
                    int addr = trueJumpAddr.pop();
                    Code.fixup(addr);
                  }
                }
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",90, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Statement ::= DesignatorStatement SCOLIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ExtType ::= VOID 
            {
              Struct RESULT =null;
		 RESULT = Tab.noType; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExtType",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ExtType ::= Type 
            {
              Struct RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = type; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExtType",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Type ::= IDENT 
            {
              Struct RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object typeName = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Obj typeNode = Tab.find(typeName.toString());
   	if (typeNode == Tab.noObj) {
   		parser.report_error("Nije pronadjen tip " + typeName + " u tabeli simbola", typeNameleft, typeNameright);
   		RESULT = Tab.noType;
   	}
   	else {
   		if (Obj.Type == typeNode.getKind()) {
   			RESULT = typeNode.getType();
   		}
   		else {
   			parser.report_error("Ime ne predstavlja tip ", typeNameleft, typeNameright);
   			RESULT = Tab.noType;
   		}
   	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ParameterRepeat ::= ParameterColinError ParameterRepeat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParameterRepeat",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ParameterRepeat ::= ParameterRbrError 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParameterRepeat",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ParameterRbrError ::= error RBR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.report_error("Uspesan oporavak od greske do \")\"", eleft, eright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParameterRbrError",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ParameterRbrError ::= Parameter RBR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParameterRbrError",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ParameterColinError ::= error COLIN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.report_error("Uspesan oporavak od greske do \",\"", eleft, eright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParameterColinError",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ParameterColinError ::= Parameter COLIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParameterColinError",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Parameter ::= Type IDENT SbrOpt 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object varName = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean array = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Obj obj = insertSymbol(Obj.Var, varName.toString(), array ? new Struct(Struct.Array, type) : type);
                obj.setFpPos(argCount);
                argCount++;
                formParsCnt++;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Parameter",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FormParsWithError ::= LBR ParameterRepeat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormParsWithError",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FormParsWithError ::= LBR RBR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormParsWithError",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // MethodDeclRepeat ::= MethodDecl MethodDeclRepeat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodDeclRepeat",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // MethodDeclRepeat ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodDeclRepeat",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // MethodDecl ::= StaticOpt ExtType IDENT NT$8 FormParsWithError VarDeclLocalRepeatOpt NT$9 StatementRepeat RCBR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int isStaticleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int isStaticright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Boolean isStatic = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   if(insideMain) {
                     insideMain = false;
                   }
                   if(retType != Tab.noType && !hasReturn) {
                      parser.report_error("Nedostaje return statement u metodi!", rleft, rright);
                   }

                   Code.put(Code.exit);
                   Code.put(Code.return_);
                   hasReturn = false;
                   insideMethod = false;
                   Tab.chainLocalSymbols(methodObj);
                   Tab.closeScope();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodDecl",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int isStaticleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int isStaticright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Boolean isStatic = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

                  methodObj.setLevel(argCount);
                  Code.put(Code.enter);
                  Code.put(argCount);
                  Code.put(Tab.currentScope.getnVars());
                  if(name.toString().equals("main")) {
                     while(!vts.empty()) {
                        VirtualTable vt = vts.pop();
                        int addr = addresses.pop();

                        vt.writeToData(addr);
                     }
                  }

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$8 ::= 
            {
              Object RESULT =null;
		int isStaticleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int isStaticright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean isStatic = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                   if(isStatic && !insideClass) {
                     parser.report_error("Globalne metode ne mogu biti staticke!", nameleft, nameright);
                   }

                   if(name.toString().equals("main")) {
                     insideMain = true;
                     Code.mainPc = Code.pc;
                   }

                   if(insideClass && !isStatic)
                     classMethodDef++;
                   else {
                     globalFunc++;
                   }

                   insideMethod = true;
                   methodObj = insertSymbol(Obj.Meth, name.toString(), retType);
                   methodObj.setAdr(Code.pc);
                   argCount = 0;
                   Tab.openScope();

                   if(!isStatic && insideClass) {
                     Obj obj = insertSymbol(Obj.Var, "this", classT);
                     obj.setFpPos(argCount);
                     argCount++;
                   }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",88, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // StaticOpt ::= STATIC 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                 if(!insideClass) {
                   parser.report_error("Kljucna rec static se moze koristiti samo uokviru klase!", sleft, sright);
                 }

                 RESULT = true;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StaticOpt",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // StaticOpt ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StaticOpt",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // MethodImplOpt ::= LCBR MethodDeclRepeat RCBR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodImplOpt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // MethodImplOpt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodImplOpt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Extends ::= error 
            {
              Struct RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              extendsType = Tab.noType;
              parser.report_error("Uspesan oporavak od greske kod nasledjivanja klase", eleft, eright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Extends",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Extends ::= EXTENDS Type 
            {
              Struct RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              if(type.getKind() != Struct.Class) {
                parser.report_error("Klasa mora nasledjivati drugu klasu!", exleft, exright);
                extendsType = Tab.noType;
              } else {
                 if(type == classT) {
                   parser.report_error("Klasa ne moze nasledjivati samu sebe!", exleft, exright);
                   extendsType = Tab.noType;
                 } else {
                   extendsType = type;
                 }
              }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Extends",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Extends ::= 
            {
              Struct RESULT =null;
		 extendsType = Tab.noType; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Extends",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ClassVar ::= IDENT 
            {
              Obj RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object className = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = insertSymbol(Obj.Type, className.toString(), classT);
                classObj = RESULT;
                Tab.openScope();
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassVar",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ClassType ::= CLASS 
            {
              Struct RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object classType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                 RESULT = new Struct(Struct.Class);
                 classT = RESULT;
                 insideClass = true;
                 classDef++;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassType",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ClassDecl ::= ClassType ClassVar Extends NT$7 LCBR VarDeclClassRepeatOpt MethodImplOpt RCBR 
            {
              Struct RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Struct) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cTleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cTright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Struct cT = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		
                Tab.chainLocalSymbols(cT);
                Tab.closeScope();
                VirtualTable vt = VTStorage.fill(classObj);
                vts.push(vt);
                addresses.push(dataSize);
                dataSize+=vt.getSize();

                insideClass = false;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDecl",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$7 ::= 
            {
              Struct RESULT =null;
		int cTleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cTright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Struct cT = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

                VirtualTable vt = VTStorage.insertVTClass(classObj.getType().toString());
                vt.setAddr(dataSize);
                insertSymbol(Obj.Fld, "$vtable", Tab.intType);

                if(extendsType != Tab.noType) {
                  Obj o = insertSymbol(Obj.Fld, "$super", extendsType);
                  offset = calculateOffset(o);
                } else {
                  offset = 0;
                }
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",87, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SbrOpt ::= LSBR RSBR 
            {
              Boolean RESULT =null;
		 RESULT = isArray = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SbrOpt",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SbrOpt ::= 
            {
              Boolean RESULT =null;
		 RESULT = isArray = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SbrOpt",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // VarDeclLocalRepeatOpt ::= VarDeclLocalRepeat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclLocalRepeatOpt",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VarDeclLocalRepeatOpt ::= LCBR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclLocalRepeatOpt",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VarDeclClassRepeatOpt ::= VarDeclClassRepeat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclClassRepeatOpt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VarDeclClassRepeatOpt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclClassRepeatOpt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VarDeclClassRepeat ::= VarDeclLocalWithError SCOLIN VarDeclClassRepeat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclClassRepeat",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VarDeclClassRepeat ::= VarDeclLocalWithError SCOLIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclClassRepeat",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VarDeclLocalWithError ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.report_error("Uspesan oporavak od greske kod deklarisanje polja klase", eleft, eright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclLocalWithError",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VarDeclLocalWithError ::= VarDeclLocal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclLocalWithError",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VarDeclLocalRepeat ::= VarDeclLocalLcbrError 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclLocalRepeat",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VarDeclLocalRepeat ::= VarDeclLocalScolinError VarDeclLocalRepeat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclLocalRepeat",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VarDeclLocalLcbrError ::= error LCBR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.report_error("Uspesan oporavak od greske do \"{\"", eleft, eright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclLocalLcbrError",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VarDeclLocalLcbrError ::= VarDeclLocal SCOLIN LCBR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclLocalLcbrError",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VarDeclLocalScolinError ::= error SCOLIN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.report_error("Uspesan oporavak od greske do \";\"", eleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclLocalScolinError",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VarDeclLocalScolinError ::= VarDeclLocal SCOLIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclLocalScolinError",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VarOptLocalRepeat ::= VarOpt 
            {
              Object RESULT =null;
		 if(insideMain) {
                          localVar++;
                        } else if(insideClass && !insideMethod) {
                          classFields++;
                        }
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarOptLocalRepeat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VarOptLocalRepeat ::= VarOpt NT$6 COLIN VarOptLocalRepeat 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarOptLocalRepeat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$6 ::= 
            {
              Object RESULT =null;
 if(insideMain) {
                          localVar++;
                        } else if(insideClass && !insideMethod) {
                          classFields++;
                        }
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",86, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VarDeclLocal ::= Type NT$5 VarOptLocalRepeat 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Struct varType = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclLocal",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$5 ::= 
            {
              Object RESULT =null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Struct varType = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 varTypeHelper = varType; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",85, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VarOptGlobalRepeat ::= EndVarOpt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarOptGlobalRepeat",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VarOptGlobalRepeat ::= StartVarOpt VarOptGlobalRepeat 
            {
              Object RESULT =null;
		 if(!insideClass && !insideMain) {
                                                           if(isArray)
                                                             globalArrays++;
                                                           else
                                                                       globalVar++;
                                                                  } else if(insideClass && !insideMethod) {
                                                                       classFields++;
                                                                  }
                                                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarOptGlobalRepeat",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EndVarOpt ::= error SCOLIN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.report_error("Uspesan oporavak od greske do \";\"", eleft, eright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EndVarOpt",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EndVarOpt ::= VarOpt SCOLIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EndVarOpt",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // StartVarOpt ::= error COLIN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.report_error("Uspesan oporavak od greske do \",\"", eleft, eright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StartVarOpt",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // StartVarOpt ::= VarOpt COLIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StartVarOpt",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VarOpt ::= IDENT SbrOpt 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object varName = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean array = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
               Obj o = insertSymbol(insideClass && !insideMethod ? Obj.Fld : Obj.Var, varName.toString(), array ? new Struct(Struct.Array, varTypeHelper) : varTypeHelper);

               if(insideClass) {
                 o.setAdr(o.getAdr() + offset);
               } else if(global) {
                 o.setAdr(dataSize++);
               }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarOpt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarDeclGlobal ::= Type NT$4 VarOptGlobalRepeat 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Struct varType = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(global && !insideClass && !insideMain) {
                    if(isArray)
                      globalArrays++;
                    else
                      globalVar++;
                    } else if(insideClass && !insideMethod) {
                      classFields++;
                    }
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclGlobal",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$4 ::= 
            {
              Object RESULT =null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Struct varType = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 varTypeHelper = varType; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",84, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ConstDefRepeat ::= ConstDef COLIN ConstDefRepeat 
            {
              Object RESULT =null;
		 if(global) globalConst++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstDefRepeat",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ConstDefRepeat ::= ConstDef 
            {
              Object RESULT =null;
		 if(global) globalConst++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstDefRepeat",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ConstDef ::= IDENT NT$3 ASSIGN Constant 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object varName = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Obj cn = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  if(cn.getType().getKind() != varTypeHelper.getKind()) {
                     parser.report_error("Tip konstante i konstanta se ne poklapaju!", varNameleft, varNameright);
                  }

                  conHelper.setAdr(cn.getAdr());
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstDef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$3 ::= 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object varName = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                 conHelper = insertSymbol(Obj.Con, varName.toString(), varTypeHelper);
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",83, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstDecl ::= CONST Type NT$2 ConstDefRepeat SCOLIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$2 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 varTypeHelper = type; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Constant ::= CHARCONST 
            {
              Obj RESULT =null;
		int matchleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int matchright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object match = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
               RESULT = new Obj(Obj.Con, "", Tab.charType);
               RESULT.setAdr(match.toString().charAt(1));
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Constant ::= BOOLCONST 
            {
              Obj RESULT =null;
		int matchleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int matchright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object match = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
               RESULT = new Obj(Obj.Con, "", parser.boolType);
               RESULT.setAdr(match.toString().equals("true") ? 1 : 0);
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Constant ::= NUMCONST 
            {
              Obj RESULT =null;
		int matchleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int matchright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object match = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
               RESULT = new Obj(Obj.Con, "", Tab.intType);
               RESULT.setAdr(Integer.parseInt(match.toString()));
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DeclRepeat ::= Declarations DeclRepeat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclRepeat",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DeclRepeat ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclRepeat",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Declarations ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declarations",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Declarations ::= VarDeclGlobal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declarations",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Declarations ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declarations",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ProgName ::= IDENT 
            {
              Object RESULT =null;
		int progNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int progNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object progName = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                insertSymbol(Obj.Prog, progName.toString(), Tab.noType);
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProgName",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= PROGRAM NT$0 ProgName DeclRepeat LCBR NT$1 MethodDeclRepeat RCBR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
              printResult();
              Tab.dump();
              Code.dataSize = dataSize;
              Tab.closeScope();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              global = false;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;

              print("=====================SEMANTICKA ANALIZA=========================");
              Tab.openScope();
              helperObj = insertSymbol(Obj.Var, "$helper", Tab.intType);
              dataSize = 1;
              VirtualTable.setParser(parser);
              VTStorage.setParser(parser);
              global = true;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

